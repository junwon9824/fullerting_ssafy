# 1. Deployment: 애플리케이션의 Pod(컨테이너 그룹)을 정의합니다.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fullerting-backend-deployment
  labels:
    app: fullerting-backend
spec:
  replicas: 2 # 2개의 Pod를 실행하도록 설정 (고가용성)
  selector:
    matchLabels:
      app: fullerting-backend
  template:
    metadata:
      labels:
        app: fullerting-backend
    spec:
      containers:
        - name: backend
          # build 시점에 생성된 Docker 이미지 주소를 사용합니다.
          image: ghcr.io/OWNER/REPO/backend:latest # 이 부분은 워크플로우에서 실제 이미지 태그로 자동 교체됩니다.
          ports:
            - containerPort: 8080 # Spring Boot 애플리케이션 포트
          envFrom:
            - secretRef:
                name: mongodb-secret # MongoDB Secret 참조
          # Liveness Probe: 컨테이너가 살아있는지 확인
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness # Spring Boot Actuator의 liveness endpoint
              port: 8080
            initialDelaySeconds: 30 # 컨테이너 시작 후 30초 뒤에 첫 검사 시작
            periodSeconds: 15 # 15초마다 검사
            timeoutSeconds: 5 # 5초 이내에 응답이 없으면 실패
          # Readiness Probe: 컨테이너가 트래픽을 받을 준비가 되었는지 확인
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness # Spring Boot Actuator의 readiness endpoint
              port: 8080
            initialDelaySeconds: 15 # 컨테이너 시작 후 15초 뒤에 첫 검사 시작
            periodSeconds: 10 # 10초마다 검사

---
# 2. Service: Deployment를 외부 또는 클러스터 내부에 노출시킵니다.
apiVersion: v1
kind: Service
metadata:
  name: fullerting-backend-service
spec:
  type: ClusterIP # 클러스터 내부에서만 접근 가능하도록 설정 (Ingress로 외부 노출 처리)
  selector:
    app: fullerting-backend # 이 Deployment의 Pod를 타겟으로 합니다.
  ports:
    - protocol: TCP
      port: 8080 # 서비스가 클러스터 내부에서 노출할 포트
      targetPort: 8080 # Pod의 컨테이너가 리스닝하는 포트
