# Workflow 이름
name: Deploy to VirtualBox Cluster

# 1. 트리거 조건: 'main' 브랜치의 'backend/' 경로에 변경사항이 있을 때 실행
on:
  push:
    branches: ["main"]
    paths:
      - "backend/**"
      - ".github/workflows/deploy.yml"

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # GitHub 제공 클린 환경에서 빌드
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:latest

  deploy:
    name: Deploy to Node ${{ matrix.node }}
    needs: build # 'build' 잡이 성공해야 실행됩니다.
    strategy:
      matrix:
        # 여기에 배포할 VirtualBox 러너들의 레이블을 추가하세요.
        node: [vbox-node-1, vbox-node-2, vbox-node-3]
    runs-on: ${{ matrix.node }} # 매트릭스에 지정된 각 러너에서 작업을 실행합니다.

    steps:
      - name: Deploy on ${{ runner.name }}
        run: |
          echo "Deploying new version on ${{ runner.name }}..."
          # 각 VirtualBox VM의 docker-compose.yml 파일이 있는 경로로 이동해야 합니다.
          cd ~/fullerting-project

          # 만약 GHCR 패키지가 private이라면, 각 러너에서 docker login이 필요할 수 있습니다.
          # echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # 최신 백엔드 이미지를 pull 받습니다.
          docker pull ghcr.io/${{ github.repository }}/backend:latest

          # docker-compose를 사용하여 백엔드 서비스를 재시작합니다.
          docker-compose up -d --force-recreate backend

          # 사용하지 않는 Docker 이미지를 정리하여 디스크 공간을 확보합니다.
          docker image prune -af
